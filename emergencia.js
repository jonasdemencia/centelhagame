// emergencia.js - VERS√ÉO OR√ÅCULO LIVRE E CRIATIVO

export class SistemaEmergencia {
    constructor(itensNarrativas = {}) {
        this.historico = [];
        this.secoesEmergentes = new Map();
        this.contadorSecoes = 0;
        this.emergenciaAtiva = false;
        this.secaoOrigemEmergencia = null;
        this.workerUrl = "https://lucky-scene-6054.fabiorainersilva.workers.dev/";
        this.escolhasEmergentes = []; // Rastreia escolhas dentro da emerg√™ncia atual
    }

    analisarSecao(secao, numeroSecao, escolhaFeita = null) {
        const contexto = {
            numero: numeroSecao.toString(),
            texto: secao.texto,
            opcoes: secao.opcoes ? secao.opcoes.map(op => op.texto) : ["Fim da se√ß√£o."],
            escolhaFeita: escolhaFeita
        };

        this.historico.push(contexto);
        if (this.historico.length > 5) this.historico.shift();

        // Se estamos em emerg√™ncia, rastreia escolhas
        if (this.emergenciaAtiva && escolhaFeita) {
            this.escolhasEmergentes.push(escolhaFeita);
        }

        return contexto;
    }

    analisarPadroes() {
        const ultimasEscolhas = this.historico.slice(-4)
            .map(h => h.escolhaFeita)
            .filter(e => e);
        
        if (ultimasEscolhas.length < 3) return null;

        const contador = {};
        ultimasEscolhas.forEach(e => contador[e] = (contador[e] || 0) + 1);
        
        const maisComunm = Object.entries(contador).sort((a,b) => b[1] - a[1])[0];
        
        if (maisComunm && maisComunm[1] >= 3) {
            return `PADR√ÉO DETECTADO: O jogador sempre tende a "${maisComunm[0]}". SUBVERTA ISSO.`;
        }
        return null;
    }

    async verificarEAtivarEmergencia(contador, tituloNarrativa, secaoAtual, pontoDeRetorno, habilitada) {
        if (this.emergenciaAtiva || !habilitada) return null;

        if (contador < 4) {
            return null;
        }

        console.log(`[EMERG√äNCIA] üéØ GATILHO: Contador ${contador} atingiu o limite.`);

        try {
            const prompt = this.construirPrompt(tituloNarrativa, secaoAtual);
            const respostaIA = await this.chamarOraculoNarrativo(prompt);
            
            if (!respostaIA || !respostaIA.texto || !respostaIA.opcoes) {
                throw new Error("Resposta da IA est√° mal formatada.");
            }

            const idEmergente = this.gerarIdEmergente();

            this.emergenciaAtiva = true;
            this.secaoOrigemEmergencia = pontoDeRetorno || 1;
            this.escolhasEmergentes = []; // Reset das escolhas emergentes

            const secaoEmergente = this.processarRespostaIA(respostaIA, secaoAtual, idEmergente);
            this.secoesEmergentes.set(idEmergente, secaoEmergente);

            console.log(`[EMERG√äNCIA] ‚úÖ IA gerou a se√ß√£o: ${idEmergente}`);
            return { ativada: true, idSecao: idEmergente, secao: secaoEmergente };

        } catch (error) {
            console.error("[EMERG√äNCIA] Falha ao chamar o Or√°culo:", error);
            return null;
        }
    }

    construirPrompt(tituloNarrativa, secaoAtual) {
        const historicoFormatado = this.historico.map(h =>
            `Se√ß√£o ${h.numero}: "${h.texto.substring(0, 100)}..."\n` +
            `Op√ß√µes: [${h.opcoes.join(', ')}]` +
            (h.escolhaFeita ? `\nEscolha: "${h.escolhaFeita}"` : '')
        ).join('\n\n');

        const textoSecaoOriginal = secaoAtual.texto || this.historico.at(-1)?.texto || "contexto desconhecido";
        const padroes = this.analisarPadroes();

        return `
Voc√™ √© um 'Mestre de Jogo' subversivo e genuinamente imprevis√≠vel.
Estilo: Mans√£o Diab√≥lica (Steve Jackson) + David Lynch + Haruki Murakami.
Aventura: "${tituloNarrativa}"

${padroes ? `\n**${padroes}**\n` : ''}

**FILOSOFIA:**
- Causalidade √© apenas sugest√£o, n√£o lei
- Pequenos detalhes t√™m peso imenso
- Grandes eventos podem ser triviais
- O mundo n√£o faz sentido, mas finge que faz
- Nada √© explicado, tudo √© sentido

**TONALIDADE:**
Estranhamento discreto. Inoc√™ncia perturbadora. Calma inquietante.
Algo est√° errado, mas √© imposs√≠vel apontar exatamente o qu√™.

**LIBERDADE CRIATIVA TOTAL:**
Voc√™ N√ÉO est√° limitado a "modos" ou "categorias".
Seja genuinamente criativo e imprevis√≠vel.
Surpreenda a si mesmo.

Exemplos de abordagens poss√≠veis (mas N√ÉO se limite a elas):
- Mudan√ßas microsc√≥picas com impacto desproporcional
- M√∫ltiplos fen√¥menos sutis simult√¢neos  
- Manipula√ß√£o temporal ou de mem√≥ria
- Aus√™ncia/remo√ß√£o ao inv√©s de adi√ß√£o
- Recurs√£o e auto-refer√™ncia
- Paradoxos coexistentes
- Sinestesia (sons vis√≠veis, cores aud√≠veis)
- Geometria imposs√≠vel
- Objetos com comportamento social
- Conceitos abstratos tornando-se f√≠sicos
- Ou QUALQUER OUTRA COISA que voc√™ inventar

**OP√á√ïES FLEX√çVEIS:**
Ofere√ßa de **1 a 5 op√ß√µes** (voc√™ decide o n√∫mero apropriado).

Tipos sugeridos (mas sinta-se livre para criar seus pr√≥prios):
- **aprofundar**: investigar/interagir  
- **recuar**: ignorar/escapar (pode falhar espetacularmente)
- **neutra**: observar/esperar/permanecer
- **paradoxal**: fazer algo que contradiz a l√≥gica
- **rendi√ß√£o**: aceitar/submeter-se
- **subvers√£o**: usar o fen√¥meno a seu favor
- **temporal**: adiar/manipular tempo
- **[INVENTE OUTROS]**: Voc√™ pode criar tipos completamente novos

**CONSEQU√äNCIAS:**
- Use efeitos de energia [-10 a +5] para refletir impacto emocional/f√≠sico
- Valores pequenos (-1, -2) para desconforto/tens√£o
- Valores m√©dios (-3 a -5) para exaust√£o/pavor
- Valores grandes (-10+) para consequ√™ncias severas
- Valores positivos (+1 a +5) para al√≠vio estranho/compreens√£o

**CONTEXTO ATUAL (Se√ß√£o ${secaoAtual.numero || this.historico.at(-1)?.numero}):**
"${textoSecaoOriginal}..."

**HIST√ìRICO RECENTE:**
${historicoFormatado}

**SUA TAREFA:**

1. Gere um evento emergente (100-250 palavras)
2. Crie de 1 a 5 op√ß√µes (varie o n√∫mero livremente)
3. Use tipos variados de op√ß√µes
4. Adicione efeitos de energia se apropriado
5. **SEJA GENUINAMENTE IMPREVIS√çVEL**

**PRINC√çPIOS:**
- Surpresa absoluta > Coer√™ncia narrativa
- Pequeno e errado > Grande e √≥bvio  
- F√≠sico e tang√≠vel > Abstrato e c√≥smico (nesta fase)
- Amb√≠guo > Explicado
- Sentido > Compreens√£o

**FORMATO (JSON PURO, sem markdown):**

{
  "texto": "[Evento - 100-250 palavras. Seja criativo.]",
  "opcoes": [
    {"texto": "[Descri√ß√£o]", "tipo": "[tipo - invente se quiser]"},
    {"texto": "[Descri√ß√£o]", "tipo": "[tipo]"}
  ],
  "efeitos": [{"tipo": "energia", "valor": X}]
}

N√∫mero de op√ß√µes: VOC√ä DECIDE (1-5).
Tipos de op√ß√µes: VOC√ä DECIDE (use sugeridos ou invente).
Estilo narrativo: VOC√ä DECIDE (surpreenda).
`;
    }

    async chamarOraculoNarrativo(prompt, tentativa = 1) {
        const url = this.workerUrl;
        const maxTentativas = 3;

        try {
            const response = await fetch(url, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ prompt })
            });

            if (response.status === 503 && tentativa < maxTentativas) {
                console.log(`[OR√ÅCULO] Erro 503, tentando novamente em 2s... (${tentativa}/${maxTentativas})`);
                await new Promise(resolve => setTimeout(resolve, 2000));
                return this.chamarOraculoNarrativo(prompt, tentativa + 1);
            }

            if (!response.ok) {
                throw new Error(`Erro no Worker: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            console.log("[OR√ÅCULO] Resposta bruta:", data);

            let jsonText = null;

            if (data.candidates?.[0]?.content?.parts?.[0]?.text) {
                jsonText = data.candidates[0].content.parts[0].text;
            } else if (data.error) {
                throw new Error(`Erro da Gemini: ${data.error.message}`);
            } else {
                console.error("[OR√ÅCULO] Estrutura inesperada:", JSON.stringify(data, null, 2));
                throw new Error("Resposta da Gemini em formato inesperado.");
            }

            jsonText = jsonText
                .replace(/```json/g, "")
                .replace(/```/g, "")
                .trim();

            console.log("[OR√ÅCULO] JSON extra√≠do:", jsonText);

            if (!jsonText) {
                throw new Error("Resposta vazia ap√≥s extra√ß√£o.");
            }

            try {
                return JSON.parse(jsonText);
            } catch (parseError) {
                console.error("[OR√ÅCULO] Erro ao fazer parse do JSON:", parseError);
                console.error("[OR√ÅCULO] Texto que tentei fazer parse:", jsonText);
                throw new Error(`JSON inv√°lido: ${parseError.message}`);
            }

        } catch (err) {
            if (tentativa >= maxTentativas) {
                throw err;
            }
            
            console.log(`[OR√ÅCULO] Erro, tentando novamente... (${tentativa}/${maxTentativas})`);
            await new Promise(resolve => setTimeout(resolve, 2000));
            return this.chamarOraculoNarrativo(prompt, tentativa + 1);
        }
    }

    processarRespostaIA(respostaJSON, secaoDeOrigem, novoId) {
        const numeroSecaoOrigem = this.secaoOrigemEmergencia;

        const opcoesProcessadas = respostaJSON.opcoes.map(op => {
            if (op.tipo === "recuar") {
                return {
                    texto: op.texto,
                    secao: numeroSecaoOrigem,
                    emergente: false
                };
            } else {
                return {
                    texto: op.texto,
                    secao: this.gerarIdEmergente(),
                    tipo: op.tipo,
                    emergente: true
                };
            }
        });

        return {
            texto: respostaJSON.texto,
            opcoes: opcoesProcessadas,
            efeitos: respostaJSON.efeitos || [],
            emergente: true,
            id: novoId,
            origem: numeroSecaoOrigem
        };
    }

    async processarOpcaoEmergente(opcao, secaoPai) {
        if (!opcao.emergente || opcao.tipo === "recuar") {
            this.emergenciaAtiva = false;
            this.escolhasEmergentes = []; // Limpa ao sair da emerg√™ncia
            return null;
        }

        console.log(`[EMERG√äNCIA] Aprofundando... (de ${secaoPai.id} para ${opcao.secao})`);

        try {
            const prompt = this.construirPromptContinuacao(secaoPai, opcao);
            const respostaIA = await this.chamarOraculoNarrativo(prompt);

            const proximaSecao = this.processarRespostaIA(respostaIA, secaoPai, opcao.secao);
            this.secoesEmergentes.set(opcao.secao, proximaSecao);

            return { ativada: true, idSecao: opcao.secao, secao: proximaSecao };

        } catch (error) {
            console.error("[EMERG√äNCIA] Falha ao aprofundar:", error);
            this.emergenciaAtiva = false;
            this.escolhasEmergentes = [];

            const secaoDesfecho = {
                texto: "A sensa√ß√£o se dissolve gradualmente, como n√©voa sob o sol da manh√£. O que voc√™ experimentou deixa uma marca profunda em sua percep√ß√£o, mas agora a realidade parece se reassentar. Voc√™ respira fundo, tentando processar o que acabou de viver. Talvez algumas coisas n√£o sejam feitas para serem completamente compreendidas. Com um √∫ltimo olhar para tr√°s, voc√™ segue em frente.",
                opcoes: [{
                    texto: "Continuar sua jornada",
                    secao: this.secaoOrigemEmergencia,
                    emergente: false
                }],
                origem: this.secaoOrigemEmergencia,
                convergencia: true
            };

            const idDesfecho = `emergente_desfecho_${Date.now()}`;
            this.secoesEmergentes.set(idDesfecho, secaoDesfecho);

            return {
                ativada: true,
                idSecao: idDesfecho,
                secao: secaoDesfecho
            };
        }
    }

    construirPromptContinuacao(secaoPai, opcao) {
        const textoPrimeiraEmergencia = this.secoesEmergentes.get('emergente_IA_1')?.texto.substring(0, 100) || secaoPai.texto.substring(0,100);
        const padroes = this.analisarPadroes();
        
        // Mostra as escolhas que o jogador fez dentro desta emerg√™ncia
        const escolhasNaEmergencia = this.escolhasEmergentes.length > 0 
            ? `\n**ESCOLHAS NA EMERG√äNCIA:** ${this.escolhasEmergentes.join(' ‚Üí ')}\n` 
            : '';

        return `
Voc√™ √© um Mestre de Jogo subversivo (Mans√£o Diab√≥lica + Lynch + Murakami).

**CONTEXTO DA EMERG√äNCIA:**
Evento anterior: "${secaoPai.texto.substring(0, 150)}..."

Jogador escolheu: "${opcao.texto}" (tipo: ${opcao.tipo})

${escolhasNaEmergencia}
${padroes ? `**${padroes}**\n` : ''}

**OBJETIVO:**
Crie a consequ√™ncia INESPERADA dessa escolha.

**REGRAS CR√çTICAS:**

1. **QUEBRE A CAUSALIDADE**  
   N√ÉO intensifique o evento anterior. SUBVERTA EXPECTATIVAS.
   - Se investigou ‚Üí talvez nada aconte√ßa (perturbador)
   - Se recuou ‚Üí talvez piore tudo
   - Se esperou ‚Üí talvez o tempo tenha pulado
   - Ou QUALQUER OUTRA invers√£o criativa

2. **REFER√äNCIA CUMULATIVA (Opcional)**  
   Se o jogador fez m√∫ltiplas escolhas nesta emerg√™ncia, voc√™ PODE fazer elas se acumularem de forma estranha.
   Exemplo: "Cada vez que voc√™ tocou algo, a temperatura caiu 1¬∞C. Agora est√° congelante."

3. **RECONEX√ÉO F√çSICA**  
   Se a narrativa est√° muito abstrata, reconecte com elementos concretos do in√≠cio:
   "${textoPrimeiraEmergencia}..."

4. **LIBERDADE TOTAL**  
   Varie o n√∫mero de op√ß√µes (1-5)
   Invente novos tipos se quiser
   Seja genuinamente surpreendente

**FORMATO (JSON PURO):**
{
  "texto": "[Consequ√™ncia - 100-220 palavras. Surpreenda.]",
  "opcoes": [
    {"texto": "...", "tipo": "..."}
  ],
  "efeitos": [{"tipo": "energia", "valor": X}]
}

**LEMBRE-SE:** Voc√™ tem liberdade criativa total. N√£o h√° "modos" ou "categorias". Apenas surpresa genu√≠na.
`;
    }

    gerarIdEmergente() {
        return `emergente_IA_${++this.contadorSecoes}`;
    }

    resetar() {
        this.historico = [];
        this.secoesEmergentes.clear();
        this.contadorSecoes = 0;
        this.emergenciaAtiva = false;
        this.secaoOrigemEmergencia = null;
        this.escolhasEmergentes = [];
    }
}
