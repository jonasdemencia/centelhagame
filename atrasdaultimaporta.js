// Importa os SDKs necess√°rios do Firebase
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-app.js";
import { getAuth } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-auth.js";
import { getFirestore, doc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/11.4.0/firebase-firestore.js";

// Configura√ß√£o do Firebase
const firebaseConfig = {
    apiKey: "AIzaSyC0XfvjonW2gd1eGAZX7NBYfPGMwI2siJw",
    authDomain: "centelhagame-9d511.firebaseapp.com",
    projectId: "centelhagame-9d511",
    storageBucket: "centelhagame-9d511.appspot.com",
    messagingSenderId: "700809803145",
    appId: "1:700809803145:web:bff4c6a751ec9389919d58"
};

// Inicializa o Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Sistema de Condi√ß√µes Ambientais Globais - Arcanum Verbis
const ARCANUM_LAUNCH_DATE = new Date('2024-01-01T00:00:00Z');

async function getArcanumConditions() {
    console.log("üîç CONDI√á√ïES DEBUG - Fun√ß√£o chamada");
    
    try {
        console.log("üîç CONDI√á√ïES DEBUG - Tentando conectar ao Firestore");
        const conditionsRef = doc(db, "gameConditions", "current");
        const conditionsSnap = await getDoc(conditionsRef);
        
        const agora = new Date();
        const chaveHora = `${agora.toDateString()} - ${agora.getHours()}:${Math.floor(agora.getMinutes()/30)*30}`;
        console.log("üîç CONDI√á√ïES DEBUG - Chave atual:", chaveHora);
        
        if (conditionsSnap.exists()) {
            const firestoreData = conditionsSnap.data();
            console.log("üîç CONDI√á√ïES DEBUG - Dados do Firestore:", firestoreData);
            console.log("üîç CONDI√á√ïES DEBUG - Chave salva:", firestoreData.timeKey);
            
            if (firestoreData.timeKey === chaveHora) {
                console.log("üîç CONDI√á√ïES DEBUG - USANDO dados do Firestore:", firestoreData.conditions);
                return firestoreData.conditions;
            }
        }
        
        console.log("üîç CONDI√á√ïES DEBUG - CALCULANDO novas condi√ß√µes");
        const diasDesdeInicio = Math.floor((agora - new Date('2024-01-01T00:00:00Z')) / (1000 * 60 * 60 * 24));
        const horasDesdeInicio = Math.floor((agora - new Date('2024-01-01T00:00:00Z')) / (1000 * 60 * 60));
        const meiasHorasDesdeInicio = Math.floor((agora - new Date('2024-01-01T00:00:00Z')) / (1000 * 60 * 30));
        
        const conditions = {
            periodo: agora.getHours() < 6 ? 'madrugada' : agora.getHours() < 12 ? 'manha' : agora.getHours() < 18 ? 'tarde' : 'noite',
            vento: ['norte', 'nordeste', 'leste', 'sudeste', 'sul', 'sudoeste', 'oeste', 'noroeste'][meiasHorasDesdeInicio % 8],
            clima: ['sol-forte', 'sol-fraco', 'nublado', 'chuva-leve', 'neblina', 'tempestade'][horasDesdeInicio % 6],
            pressao: ['alta', 'normal', 'baixa'][Math.floor(horasDesdeInicio / 2) % 3],
            energiaMagica: ['alta', 'normal', 'baixa', 'interferencia'][diasDesdeInicio % 4],
            temperatura: ['muito-frio', 'frio', 'ameno', 'quente', 'muito-quente'][diasDesdeInicio % 5],
            lua: ['nova', 'crescente', 'cheia', 'minguante'][Math.floor(diasDesdeInicio / 2) % 4],
            estacao: ['primavera', 'verao', 'outono', 'inverno'][Math.floor(diasDesdeInicio / 5) % 4]
        };
        
        console.log("üîç CONDI√á√ïES DEBUG - Condi√ß√µes calculadas:", conditions);
        console.log("üîç CONDI√á√ïES DEBUG - SALVANDO no Firestore");
        
        await setDoc(conditionsRef, { conditions, timeKey: chaveHora });
        console.log("üîç CONDI√á√ïES DEBUG - SALVO com sucesso");
        
        return conditions;
        
    } catch (error) {
        console.error("üîç CONDI√á√ïES DEBUG - ERRO:", error);
        const fallback = {
            periodo: 'tarde', estacao: 'inverno', vento: 'norte', clima: 'nublado',
            lua: 'cheia', temperatura: 'frio', pressao: 'alta', energiaMagica: 'normal'
        };
        console.log("üîç CONDI√á√ïES DEBUG - USANDO fallback:", fallback);
        return fallback;
    }
}


function getConditionIcon(tipo, valor) {
    const icones = {
        periodo: { manha: 'üåÖ', tarde: '‚òÄÔ∏è', noite: 'üåô', madrugada: 'üåå' },
        estacao: { primavera: 'üå∏', verao: 'üåû', outono: 'üçÇ', inverno: '‚ùÑÔ∏è' },
        vento: { norte: '‚¨ÜÔ∏èüí®', sul: '‚¨áÔ∏èüí®', leste: '‚û°Ô∏èüí®', oeste: '‚¨ÖÔ∏èüí®', nordeste: '‚ÜóÔ∏èüí®', noroeste: '‚ÜñÔ∏èüí®', sudeste: '‚ÜòÔ∏èüí®', sudoeste: '‚ÜôÔ∏èüí®' },
        clima: { 'sol-forte': '‚òÄÔ∏è', 'sol-fraco': 'üå§Ô∏è', nublado: '‚òÅÔ∏è', 'chuva-leve': 'üå¶Ô∏è', neblina: 'üå´Ô∏è', tempestade: '‚õàÔ∏è' },
        lua: { nova: 'üåë', crescente: 'üåì', cheia: 'üåï', minguante: 'üåó' },
        temperatura: { 'muito-frio': 'ü•∂', frio: '‚ùÑÔ∏è', ameno: 'üå°Ô∏è', quente: 'üî•', 'muito-quente': 'üåã' },
        pressao: { alta: 'üìà', normal: 'üìä', baixa: 'üìâ' },
        energiaMagica: { alta: '‚ö°', normal: '‚ú®', baixa: 'üí´', interferencia: 'üåÄ' }
    };
    return icones[tipo]?.[valor] || '‚ùì';
}



// Sistema Arcanum Iudicium
window.arcanumIudicium = {
    sucessos: 0,
    falhas: 0,
    ultimaCategoria: null,
    magiaComDesconto: null,
    magiasMemorizadas: [],
    magiasEstudadas: [],
    magiasReflexao: [],
    reflexoesSalvas: {},



    async sucesso() { 
        this.sucessos++; 
        console.log(`Arcanum Iudicium: Sucesso (${this.sucessos}/${this.sucessos + this.falhas})`);
        await this.salvarFirestore();
    },
    
    async falha() { 
        this.falhas++; 
        console.log(`Arcanum Iudicium: Falha (${this.sucessos}/${this.sucessos + this.falhas})`);
        await this.salvarFirestore();
    },
    
    getEficiencia() {
        const total = this.sucessos + this.falhas;
        return total > 0 ? (this.sucessos / total * 100).toFixed(1) : 0;
    },
    
    getCategoria() {
        const eficiencia = parseFloat(this.getEficiencia());
        if (eficiencia >= 80) return 'alta';
        if (eficiencia < 30) return 'muito-baixa';
        return 'baixa';
    },
    
    async salvarFirestore() {
        try {
            const user = auth?.currentUser;
            if (!user) return;
            
            const playerRef = doc(db, "players", user.uid);
            await setDoc(playerRef, { 
                arcanumIudicium: {
                    sucessos: this.sucessos,
                    falhas: this.falhas,
                    ultimaCategoria: this.ultimaCategoria,
                    magiaComDesconto: this.magiaComDesconto,
                    magiasMemorizadas: this.magiasMemorizadas,
                    magiasEstudadas: this.magiasEstudadas,
                    magiasReflexao: this.magiasReflexao,
                    reflexoesSalvas: this.reflexoesSalvas

                }
            }, { merge: true });
        } catch (error) {
            console.error("Erro ao salvar Arcanum Iudicium:", error);
        }
    },
    
    async carregarFirestore() {
        try {
            const user = auth?.currentUser;
            if (!user) {
                console.log("Arcanum Iudicium: Usu√°rio n√£o logado");
                return;
            }
            
            console.log("Arcanum Iudicium: Carregando dados do Firestore...");
            const playerRef = doc(db, "players", user.uid);
            const playerSnap = await getDoc(playerRef);
            
            if (playerSnap.exists() && playerSnap.data().arcanumIudicium) {
                const data = playerSnap.data().arcanumIudicium;
                this.sucessos = data.sucessos || 0;
                this.falhas = data.falhas || 0;
                this.ultimaCategoria = data.ultimaCategoria || null;
                this.magiaComDesconto = data.magiaComDesconto || null;
                this.magiasMemorizadas = data.magiasMemorizadas || [];
                this.magiasEstudadas = data.magiasEstudadas || [];
                this.magiasReflexao = data.magiasReflexao || [];
                this.reflexoesSalvas = data.reflexoesSalvas || {};


                console.log(`Arcanum Iudicium carregado: ${this.sucessos} sucessos, ${this.falhas} falhas, categoria: ${this.ultimaCategoria}, desconto: ${this.magiaComDesconto}, memorizadas: ${this.magiasMemorizadas.length}`);
            } else {
                console.log("Arcanum Iudicium: Nenhum dado encontrado no Firestore - iniciando com valores zerados");
            }
        } catch (error) {
            console.error("Erro ao carregar Arcanum Iudicium:", error);
        }
    },
    
    async memorizarMagia(idMagia) {
        if (!this.magiasMemorizadas.includes(idMagia)) {
            this.magiasMemorizadas.push(idMagia);
            await this.salvarFirestore();
            console.log(`Magia memorizada: ${idMagia}`);
        }
    },
    
    isMagiaMemorizada(idMagia) {
    return this.magiasMemorizadas.includes(idMagia);
},

async estudarMagia(idMagia) {
    if (!this.magiasEstudadas.includes(idMagia)) {
        this.magiasEstudadas.push(idMagia);
        await this.salvarFirestore();
    }
},

isMagiaEstudada(idMagia) {
    return this.magiasEstudadas.includes(idMagia);
},

    async reflexaoMagia(idMagia) {
    if (!this.magiasReflexao.includes(idMagia)) {
        this.magiasReflexao.push(idMagia);
        await this.salvarFirestore();
    }
},

isMagiaReflexao(idMagia) {
    return this.magiasReflexao.includes(idMagia);
}

};


// Mensagens do Grim√≥rio por Categoria
const mensagensGrimorio = {
    'alta': [
        "Tuas palavras cortam como ferro que se lembra de ser espada.",
        "O papel se curva ao teu comando. Mas e tua vontade, a quem obedece?",
        "O sil√™ncio entre os versos tamb√©m conjura. Tu sabes us√°-lo?",
        "A p√°gina vibrou com tua voz. Ela ainda ecoa.",
        "N√£o √©s o primeiro a dominar-me. Mas talvez sejas o √∫ltimo.",
        "Est√°s pronto para conjurar o que n√£o quer ser conjurado?",
        "Dominas os s√≠mbolos. Mas entendes o que eles sangram?",
        "Muito bem. Cuidado para que tua chama n√£o vire farol para aquilo que te odeia.",
        "Gostaria de saber... tu √©s feito de papel tamb√©m?",
        "Se fosses um feiti√ßo, qual seria teu custo?"
    ],
    'baixa': [
        "Algo em ti balan√ßa, como tinta prestes a escorrer.",
        "Tu l√™s as palavras... mas l√™s a pausa entre elas?",
        "Tua m√£o hesita. √â medo de errar ou de acertar?",
        "J√° pensaste se √©s digno do que tentas invocar?",
        "A magia n√£o falha ‚Äî quem falha √© a voz que a pronuncia.",
        "Est√°s tentando conjurar... ou apenas imitar?",
        "O grim√≥rio te ouve. Ele n√£o est√° convencido.",
        "J√° sentiste a p√°gina se calar sob tua m√£o?",
        "H√° algo entre ti e o feiti√ßo. Que nome tem esse v√©u?",
        "Por que insistes em escrever com m√£os que tremem?"
    ],
    'muito-baixa': [
        "O papel te rejeita. E eu tamb√©m.",
        "Fica dif√≠cil ser temido quando at√© a tinta foge de ti.",
        "Conjura√ß√£o ou contorcionismo? Me confundo.",
        "J√° considerou usar pedras em vez de palavras?",
        "A magia sente vergonha por ter sido associada ao teu gesto.",
        "Eu teria te rasgado... se ainda valesses o esfor√ßo.",
        "Ergues a m√£o como quem pede desculpas. A quem?",
        "Tu l√™s como quem implora. E a p√°gina n√£o responde a s√∫plicas.",
        "Est√°s tentando ou apenas... fazendo barulho?",
        "Se tua magia tivesse um nome, seria 'Errum'."
    ]
};

// Fun√ß√£o para exibir julgamento do grim√≥rio
async function exibirJulgamentoGrimorio(categoria) {
    return new Promise(async (resolve) => {
        // Criar overlay
        const overlay = document.createElement('div');
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.9);
            z-index: 9999;
            display: flex;
            justify-content: center;
            align-items: center;
            opacity: 0;
            transition: opacity 0.3s ease;
        `;
        
        // Criar container da mensagem
        const messageContainer = document.createElement('div');
        messageContainer.style.cssText = `
            color: white;
            font-size: 18px;
            text-align: center;
            max-width: 600px;
            padding: 20px;
            font-family: 'VT323', monospace;
            letter-spacing: 1.5px;
        `;
        
        overlay.appendChild(messageContainer);
        document.body.appendChild(overlay);
        
        // Desabilitar todos os bot√µes
        const botoes = document.querySelectorAll('button');
        botoes.forEach(btn => btn.disabled = true);
        
        // Fade in
        setTimeout(() => {
            overlay.style.opacity = '1';
        }, 100);
        
        // Aguardar fade in e come√ßar digita√ß√£o
        setTimeout(async () => {
            const mensagens = mensagensGrimorio[categoria];
            const mensagem = mensagens[Math.floor(Math.random() * mensagens.length)];
            
            // Digitar mensagem
            let index = 0;
            const digitar = () => {
                if (index < mensagem.length) {
                    messageContainer.textContent += mensagem.charAt(index);
                    index++;
                    setTimeout(digitar, 50); // 50ms por caractere
                } else {
                    // Verificar se √© alta efici√™ncia e sortear desconto
                    if (categoria === 'alta' && Math.random() < 0.33) {
                        // Filtrar magias eleg√≠veis (custo > 1)
                        const magiasElegiveis = magias.filter(magia => magia.custo > 1);
                        if (magiasElegiveis.length > 0) {
                            const magiaEscolhida = magiasElegiveis[Math.floor(Math.random() * magiasElegiveis.length)];
                            window.arcanumIudicium.magiaComDesconto = magiaEscolhida.nome;
                            console.log(`Desconto aplicado √† magia: ${magiaEscolhida.nome}`);
                        }
                    }
                    
                    // Aguardar 2s e fazer fade out
                    setTimeout(() => {
                        overlay.style.opacity = '0';
                        setTimeout(() => {
                            document.body.removeChild(overlay);
                            // Reabilitar bot√µes
                            botoes.forEach(btn => btn.disabled = false);
                            resolve();
                        }, 300);
                    }, 2000);
                }
            };
            
            digitar(); // ESTA LINHA ESTAVA FALTANDO
        }, 300);
    });
}





const magias = [
    {
        id: "armadura-arcana",
        nome: "Armadura Arcana",
        nomeVerdadeiro: "Vestes de Recusa",
        descricao: "O conjurador se cobre de mem√≥ria s√≥lida, de palavras que nunca deixaram o papel.\nA p√°gina se dobra, formando um molde invis√≠vel ao redor do corpo.",
        custo: 3,
        efeito: "+4 Coura√ßa",
        componente: "Retalho da pele de quem j√° sobreviveu a mais de uma senten√ßa",
        resistencia: "Nenhuma",
        tempoExecucao: "1 turno",
        duracao: "3 turnos"
    },
    {
        id: "causar-medo",
        nome: "Causar Medo (TIMORIS)",
        nomeVerdadeiro: "Eco do Berro N√£o Nascido",
        descricao: "A p√°gina emite um som que n√£o se ouve.\nAqueles que t√™m pouco sangue para perder sentem sua espinha entortar sob o peso do \"e se\".",
        custo: 3,
        efeito: "Fugir de terror (alvos com < 40 HP)",
        componente: null,
        resistencia: "Sim",
        tempoExecucao: "1 turno",
        duracao: "At√© o fim do combate"
    },
    {
        id: "cura-maior",
        nome: "Cura Maior",
        nomeVerdadeiro: "C√¢ntico do Cora√ß√£o que Teima",
        descricao: "Um poema partido em tr√™s partes, lido em sil√™ncio. O papel absorve o desespero e o transforma em sopro vital.\nExige do conjurador f√© em algo que talvez j√° tenha morrido.",
        custo: 2,
        efeito: "Cura profunda (10d8+1)",
        componente: null,
        resistencia: "Nenhuma",
        tempoExecucao: "1 turno",
        duracao: "Instant√¢nea"
    },
    {
        id: "cura-menor",
        nome: "Cura Menor (SANITAS)",
        nomeVerdadeiro: "Murm√∫rio do Sangue Quieto",
        descricao: "Uma prece curta inscrita nas margens da p√°gina, ativada por compaix√£o ou temor.\nO grim√≥rio sussurra mem√≥rias de inf√¢ncia, quando dor era cuidada com m√£os e l√°grimas.",
        custo: 2,
        efeito: "Cura leve (1d8)",
        componente: null,
        resistencia: "Nenhuma",
        tempoExecucao: "1 turno",
        duracao: "Instant√¢nea"
    },
    {
        id: "missil-magico",
        nome: "Dardos M√≠sticos (FULMEN)",
        nomeVerdadeiro: "Olhar Afiado do Inominado",
        descricao: "As linhas saltam da p√°gina como farpas et√©reas. Cada letra se torna uma lan√ßa de pensamento puro.\nN√£o mira a carne, mas a hesita√ß√£o entre as costelas.",
        custo: 1,
        efeito: "Dano (1d4)",
        componente: null,
        resistencia: "Nenhuma",
        tempoExecucao: "1 turno",
        duracao: "Instant√¢nea"
    },
    {
        id: "escudo-arcano",
        nome: "Escudo Arcano (AEGIS)",
        nomeVerdadeiro: "C√≠rculo do N√£o-Tocar",
        descricao: "Linhas em espiral giram na p√°gina como se gravadas √† unha.\nProtege n√£o com for√ßa, mas com inten√ß√£o perfeita.",
        custo: 3,
        efeito: "+4 Coura√ßa",
        componente: null,
        resistencia: "Nenhuma",
        tempoExecucao: "1 turno",
        duracao: "3 turnos"
    },
    {
        id: "luz",
        nome: "Luz (LUMINA)",
        nomeVerdadeiro: "Vislumbre da Aurora que Queima",
        descricao: "A tinta brilha no escuro da p√°gina, irradiando luz branca.\nN√£o ilumina o caminho ‚Äî apenas o erro dos olhos alheios.",
        custo: 2,
        efeito: "Ofuscamento (precis√£o -3)",
        componente: null,
        resistencia: "Sim",
        tempoExecucao: "1 turno",
        duracao: "3 turnos"
    },
    {
        id: "pasmar",
        nome: "Pasmar (OBSTUPRA)",
        nomeVerdadeiro: "Sil√™ncio do Instante Rachado",
        descricao: "Ao pronunciar essa palavra, o tempo hesita.\nO inimigo sente que algo o observava antes dele existir.",
        custo: 3,
        efeito: "Perda de turno (alvos com < 50 HP)",
        componente: "O res√≠duo macio de uma nota que foi tocada para ningu√©m ouvir",
        resistencia: "Sim",
        tempoExecucao: "1 turno",
        duracao: "1 turno"
    },
    {
        id: "raio-acido",
        nome: "Raio de √Åcido (CORRODO)",
        nomeVerdadeiro: "Chuva da Boca Amarga",
        descricao: "Cada gota conjurada cont√©m o azedume de uma palavra n√£o dita.\nO papel escorre enquanto voc√™ l√™ ‚Äî e quem v√™, sente arder.",
        custo: 1,
        efeito: "Dano √°cido (1d3)",
        componente: null,
        resistencia: "Nenhuma",
        tempoExecucao: "1 turno",
        duracao: "Instant√¢nea"
    },
    {
        id: "sono",
        nome: "Sono (QUIESCAS)",
        nomeVerdadeiro: "C√¢ntico da P√°lpebra Fr√°gil",
        descricao: "Cada linha √© um sussurro que pesa nas t√™mporas.\nO grim√≥rio exige um fragmento do sono alheio ‚Äî",
        custo: 5,
        efeito: "Sono (alvos com < 50 HP)",
        componente: "A can√ß√£o de quem canta mesmo sabendo que ser√° esmagado",
        resistencia: "Sim",
        tempoExecucao: "1 turno",
        duracao: "1 turno"
    },
    {
        id: "toque-chocante",
        nome: "Toque Chocante (FULGOR)",
        nomeVerdadeiro: "Dedos da Tempestade Guardada",
        descricao: "O conjurador n√£o conjura ‚Äî apenas empresta sua m√£o ao trov√£o.\nA p√°gina pulsa como um m√∫sculo el√©trico.",
        custo: 2,
        efeito: "Dano el√©trico por toque (1d8)",
        componente: null,
        resistencia: "Nenhuma",
        tempoExecucao: "1 turno",
        duracao: "Instant√¢nea"
    },
    {
        id: "toque-macabro",
        nome: "Toque Macabro (EXSANGUO)",
        nomeVerdadeiro: "Frieza que Suga a Cor",
        descricao: "O toque rouba mais do que calor ‚Äî leva inten√ß√£o.\nA p√°gina fica cinza por alguns segundos ap√≥s o uso.",
        custo: 3,
        efeito: "Dano + enfraquecimento (1d4+1)",
        componente: null,
        resistencia: "Sim",
        tempoExecucao: "1 turno",
        duracao: "3 turnos"
    }
];

// Inten√ß√µes das magias
const intencoesMagias = {
    "armadura-arcana": "Permanecer. N√£o ser desfeito. Guardar a forma mesmo sob amea√ßa.",
    "causar-medo": "Afastar. Evocar o p√¢nico primordial. Despertar a mem√≥ria do que foi temido antes mesmo de se nascer.",
    "cura-maior": "Restaurar o que se partiu. Lembrar o corpo de quem ele j√° foi ‚Äî inteiro.",
    "cura-menor": "Acalmar. Lamber feridas pequenas com m√£os invis√≠veis. Fazer o tempo cuidar mais r√°pido.",
    "missil-magico": "Ferir sem hesitar. Encontrar a d√∫vida no peito do outro e transform√°-la em dor certeira.",
    "escudo-arcano": "Proteger sem barganha. Ser nega√ß√£o pura ao toque. Delimitar o sagrado.",
    "luz": "Revelar. Obrigar olhos a verem o que fingem n√£o estar l√°.",
    "pasmar": "Silenciar o instante. Suspender a vontade alheia. Fazer o tempo trope√ßar.",
    "raio-acido": "Corr√≥i por justi√ßa. Dissolver o que finge firmeza. Desfazer verdades falsas.",
    "sono": "Fechar olhos para evitar o pior. Conceder esquecimento tempor√°rio. Esconder do mundo por um instante.",
    "toque-chocante": "Despertar com viol√™ncia. Lembrar que h√° pulsos el√©tricos at√© nos corpos que desistem.",
    "toque-macabro": "Enfraquecer. Fazer a alma esquecer como se mant√©m firme. Roubar a √∫ltima chama."
};

// Julgamentos pessoais das magias
const julgamentosMagias = {
    "armadura-arcana": [
        "Voc√™ se cobre de palavras, mas nenhuma delas √© sua.",
        "Parece que confia mais na p√°gina do que em si mesmo.",
        "Voc√™ luta para n√£o ser tocado, mas j√° foi ferido por dentro."
    ],
    "causar-medo": [
        "Voc√™ gosta de ver o pavor nos outros porque reconhece o seu.",
        "Teme ser fraco, ent√£o usa o medo como disfarce.",
        "Sua voz n√£o grita ‚Äî geme."
    ],
    "cura-maior": [
        "Seu desespero √© um pedido disfar√ßado.",
        "Voc√™ cura os outros para n√£o encarar suas pr√≥prias feridas.",
        "H√° f√© em voc√™‚Ä¶ mas ela cambaleia."
    ],
    "cura-menor": [
        "Suas m√£os tremem ao cuidar ‚Äî voc√™ n√£o aprendeu a ser gentil.",
        "Cada toque seu parece pedir desculpas.",
        "Voc√™ n√£o cr√™ no rem√©dio, apenas no ritual."
    ],
    "missil-magico": [
        "Seu olhar √© mais cruel do que sua magia.",
        "Voc√™ prefere atacar a ouvir.",
        "Sua pontaria nasce do rancor."
    ],
    "escudo-arcano": [
        "Voc√™ n√£o quer ser tocado porque teme se desfazer.",
        "Confia mais em barreiras do que em palavras.",
        "Seu escudo √© feito de ressentimento."
    ],
    "luz": [
        "Voc√™ ilumina para cegar, n√£o para guiar.",
        "Seus olhos queimam, mas seu cora√ß√£o permanece escuro.",
        "A luz que voc√™ conjura n√£o aquece ningu√©m."
    ],
    "pasmar": [
        "Voc√™ congela o mundo porque n√£o sabe avan√ßar.",
        "Vive pausando o tempo‚Ä¶ mas nunca olha pra tr√°s.",
        "Voc√™ n√£o interrompe o inimigo ‚Äî interrompe a si mesmo."
    ],
    "raio-acido": [
        "Sua boca √© √°cida porque seu sil√™ncio j√° apodreceu.",
        "Voc√™ n√£o digere o mundo ‚Äî o vomita.",
        "A m√°goa transbordou. E voc√™ chama isso de feiti√ßo."
    ],
    "sono": [
        "Voc√™ p√µe os outros pra dormir, mas nunca descansa.",
        "Sua fadiga √© culpa disfar√ßada.",
        "Seu canto embala os outros, mas ningu√©m canta pra voc√™."
    ],
    "toque-chocante": [
        "Sua eletricidade n√£o √© poder ‚Äî √© p√¢nico.",
        "Voc√™ nunca segura‚Ä¶ apenas descarrega.",
        "Seus dedos tremem mesmo antes do feiti√ßo."
    ],
    "toque-macabro": [
        "Voc√™ √© frio porque o calor te abandonou.",
        "O toque que voc√™ oferece √© aus√™ncia.",
        "Voc√™ n√£o enfraquece o inimigo ‚Äî apenas compartilha sua apatia."
    ]
};

// Perguntas existenciais das magias
const perguntasMagias = {
    "armadura-arcana": [
        "De que realmente voc√™ tenta se proteger?",
        "Voc√™ resistiria ao mundo se n√£o tivesse pele?",
        "A recusa √© defesa‚Ä¶ ou medo?"
    ],
    "causar-medo": [
        "O que voc√™ teme quando est√° sozinho?",
        "J√° sentiu medo de quem est√° se tornando?",
        "Existe algo mais assustador que seu pr√≥prio sil√™ncio?"
    ],
    "cura-maior": [
        "Ainda acredita que merece ser curado?",
        "J√° perdoou aquilo que partiu seu cora√ß√£o?",
        "O que voc√™ faz com a dor que n√£o cicatriza?"
    ],
    "cura-menor": [
        "Quando foi a √∫ltima vez que voc√™ chorou por si mesmo?",
        "Qual ferida nunca recebeu um gesto de cuidado?",
        "Voc√™ se cura‚Ä¶ ou apenas ignora a dor?"
    ],
    "missil-magico": [
        "O que voc√™ fere quando pensa em atacar?",
        "J√° destruiu algo s√≥ por medo de que te destru√≠sse antes?",
        "Voc√™ sabe mirar... mas por qu√™?"
    ],
    "escudo-arcano": [
        "Quem voc√™ n√£o permite mais se aproximar?",
        "O que h√° dentro do seu c√≠rculo que n√£o suporta luz?",
        "A prote√ß√£o √© escolha... ou pris√£o?"
    ],
    "luz": [
        "O que voc√™ espera ver quando tudo estiver iluminado?",
        "Existe algo em voc√™ que a luz n√£o alcan√ßa?",
        "Quando a verdade brilha, o que voc√™ desvia o olhar para n√£o ver?"
    ],
    "pasmar": [
        "J√° foi paralisado por algo que n√£o compreendeu?",
        "O tempo te respeita‚Ä¶ ou te ignora?",
        "Em que instante sua hist√≥ria rachou?"
    ],
    "raio-acido": [
        "Qual palavra engolida ainda corr√≥i sua garganta?",
        "Voc√™ cospe dor‚Ä¶ ou apenas recicla a que recebeu?",
        "√â mais f√°cil destruir ou dizer o que sente?"
    ],
    "sono": [
        "O que voc√™ teme sonhar se adormecer?",
        "Qual vig√≠lia voc√™ se recusa a abandonar?",
        "Se dormisse agora‚Ä¶ o que deixaria de existir?"
    ],
    "toque-chocante": [
        "O que em voc√™ ainda espera explodir?",
        "J√° se arrependeu depois de ferir?",
        "Voc√™ toca com raiva... ou por desespero?"
    ],
    "toque-macabro": [
        "J√° sentiu sua pr√≥pria vida se esvaziando?",
        "A que custo voc√™ se torna intoc√°vel?",
        "O que ainda te d√° cor?"
    ]
};


let paginaAtual = 0;

const contentData = {
    grimorio: () => criarGrimorio(),
    cruzar: () => criarCruzarAnimais(), // ADICIONAR ESTA LINHA
    sacrificar: "Sacrificar animais (Ber√ßo e L√¢mina)",
    silencio: "Sil√™ncio (entrecorda)",
    dormir: () => { dormirTelaPreta(); return ""; },
    cagar: "Necessidades fisiol√≥gicas - caso coma, tem que cagar",
    comer: "Comer - n√£o existe fome, a pessoa come se quiser",
    alambique: "Alambique",
    sombra: "Jogos com a sua sombra - exclusivo para ladinos (Roubar de si mesmo)",
    semente: "Semente de si mesmo (para depois)",
    sangue: "Sangue Recursivo (para depois)"
};

async function criarGrimorio() {
  await window.arcanumIudicium.carregarFirestore();
  const eficiencia = parseFloat(window.arcanumIudicium.getEficiencia());
  const categoriaAtual = window.arcanumIudicium.getCategoria();

  console.log(`Efici√™ncia atual do Arcanum Iudicium: ${eficiencia}%`);

  // Verificar se houve mudan√ßa de categoria
  if (window.arcanumIudicium.ultimaCategoria && window.arcanumIudicium.ultimaCategoria !== categoriaAtual) {
    console.log(`Mudan√ßa de categoria detectada: ${window.arcanumIudicium.ultimaCategoria} ‚Üí ${categoriaAtual}`);
    // Se saiu da alta efici√™ncia, remove desconto
    if (categoriaAtual !== 'alta') {
      window.arcanumIudicium.magiaComDesconto = null;
    }
    // Atualizar categoria e salvar
    window.arcanumIudicium.ultimaCategoria = categoriaAtual;
    await window.arcanumIudicium.salvarFirestore();
    // Exibir julgamento
    await exibirJulgamentoGrimorio(categoriaAtual);
  } else if (!window.arcanumIudicium.ultimaCategoria) {
    // Primeira vez - salvar categoria atual
    window.arcanumIudicium.ultimaCategoria = categoriaAtual;
    await window.arcanumIudicium.salvarFirestore();
  }

  // Se n√£o est√° em alta efici√™ncia, garantir que n√£o h√° desconto
  if (categoriaAtual !== 'alta') {
    window.arcanumIudicium.magiaComDesconto = null;
  }

  let classeEficiencia = '';
  if (eficiencia >= 80) {
    classeEficiencia = 'grimorio-alta';
  } else if (eficiencia < 30) {
    classeEficiencia = 'grimorio-muito-baixa';
  } else {
    classeEficiencia = 'grimorio-baixa';
  }

  // --- AJUSTE CR√çTICO: n√£o tente acessar magias[paginaAtual] se estiver na Margem Viva ---
  if (paginaAtual === magias.length) {
    return `
      <div class="grimorio-container ${classeEficiencia}">
        <div id="magia-content">
          ${await criarPaginaMargemViva()}
        </div>
        <div class="grimorio-nav">
          <button class="nav-btn" id="prev-btn" onclick="mudarPagina(-1)">‚Üê P√°gina Anterior</button>
          <span class="page-number">P√°gina ${paginaAtual + 1}</span>
          <button class="nav-btn" id="next-btn" onclick="mudarPagina(1)">Pr√≥xima P√°gina ‚Üí</button>
        </div>
        <div class="grimorio-actions"></div>
      </div>
    `;
  }

  // Verificar se magia atual est√° memorizada (s√≥ se N√ÉO estiver na Margem Viva)
  const magiaAtual = magias[paginaAtual];
  const jaMemorizada = window.arcanumIudicium.isMagiaMemorizada(magiaAtual.id);

  return `
    <div class="grimorio-container ${classeEficiencia}">
      <div id="magia-content">
        ${criarPaginaMagia(paginaAtual)}
      </div>
      <div class="grimorio-nav">
        <button class="nav-btn" id="prev-btn" onclick="mudarPagina(-1)">‚Üê P√°gina Anterior</button>
        <span class="page-number">P√°gina ${paginaAtual + 1}</span>
        <button class="nav-btn" id="next-btn" onclick="mudarPagina(1)">Pr√≥xima P√°gina ‚Üí</button>
      </div>
      <div class="grimorio-actions"></div>
    </div>
  `;
}


async function criarPaginaMargemViva() {
  let proezasHtml = '<div style="color: #888; font-style: italic;">(Em branco... por enquanto)</div>';
  const user = auth.currentUser;
  if (user) {
    const playerRef = doc(db, "players", user.uid);
    const playerSnap = await getDoc(playerRef);
    if (playerSnap.exists() && playerSnap.data().proezas && playerSnap.data().proezas.length > 0) {
      proezasHtml = playerSnap.data().proezas.map(msg =>
        `<div style="margin-bottom: 8px; color: #feca57;">${msg}</div>`
      ).join('');
    }
  }
  return `
    <div class="magia-page active">
      <div class="magia-titulo">Margem Viva</div>
      <div class="magia-divisor">‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</div>
      <div class="magia-descricao" style="font-style: italic; color: #888;">
        ${proezasHtml}
      </div>
      <div class="magia-divisor">‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</div>
    </div>
  `;
}

function criarPaginaMagia(index) {
    // üëâ P√°gina extra no final do grim√≥rio
    if (index === magias.length) {
        return `
            <div class="magia-page active">
                <div class="magia-titulo">Margem Viva</div>
                <div class="magia-divisor">‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</div>
                <div class="magia-descricao" style="font-style: italic; color: #888;">
                    (Em branco... por enquanto)
                </div>
                <div class="magia-divisor">‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</div>
            </div>
        `;
    }

    const magia = magias[index];

    // Aplica efeitos aleat√≥rios baseados na efici√™ncia
    setTimeout(() => aplicarEfeitosAleatorios(), 100);

    // Verificar se esta magia tem desconto
    const temDesconto = window.arcanumIudicium.magiaComDesconto === magia.nome;
    const custoFinal = temDesconto ? Math.max(1, magia.custo - 1) : magia.custo;
    const textoDesconto = temDesconto ? ` <span style="color: #00ff00;">-1</span>` : '';

    // Verificar se magia est√° memorizada
    const jaMemorizada = window.arcanumIudicium.isMagiaMemorizada(magia.id);
    const statusMemorizada = jaMemorizada ? ' <span style="color: #ffd700;">‚úì Memorizada</span>' : '';
    const jaEstudada = window.arcanumIudicium.isMagiaEstudada(magia.id);
    const intencaoHtml = jaEstudada
        ? `<div class="magia-intencao" style="margin: 15px 0; font-size: 13px; color: #c5bebe; font-weight: bold;"><strong>Inten√ß√£o:</strong> ${intencoesMagias[magia.id]}</div>`
        : '';
    const reflexaoSalva = window.arcanumIudicium.reflexoesSalvas[magia.id];
    const reflexaoHtml = reflexaoSalva
        ? `<div class="magia-julgamento" style="margin: 15px 0; font-size: 13px; color: #8B4513; font-weight: bold; font-style: italic;">${reflexaoSalva}</div>`
        : '';
    const jaReflexao = window.arcanumIudicium.isMagiaReflexao(magia.id);
    const mostrarEstudarNovamente = jaEstudada && !jaReflexao && Math.random() < 0.33;

    return `
        <div class="magia-page active">
            <div class="magia-titulo">${magia.nome}${statusMemorizada}</div>
            <div class="magia-nome-verdadeiro">"${magia.nomeVerdadeiro}"</div>
            <div class="magia-divisor">‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</div>
            <div class="magia-descricao">${magia.descricao.replace(/\n/g, '<br><br>')}</div>
            ${intencaoHtml}
            ${reflexaoHtml}
            <div class="magia-stats">
                <div>üìñ <span class="label">Custo:</span> <span class="valor">${custoFinal}${textoDesconto}</span></div>
                <div>üåÄ <span class="label">Efeito:</span> <span class="valor">${magia.efeito}</span></div>
                <div>üïØÔ∏è <span class="label">Componente:</span> <span class="valor">${magia.componente || 'Nenhum'}</span></div>
                <div>üõ°Ô∏è <span class="label">Resist√™ncia:</span> <span class="valor">${magia.resistencia}</span></div>
                <div>‚è±Ô∏è <span class="label">Tempo de Execu√ß√£o:</span> <span class="valor">${magia.tempoExecucao}</span></div>
                <div>‚è≥ <span class="label">Dura√ß√£o:</span> <span class="valor">${magia.duracao}</span></div>
            </div>
            <div class="magia-divisor">‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê</div>
        </div>
    `;
}



async function mudarPagina(direcao) {
    const novaPagina = paginaAtual + direcao;
    if (novaPagina < 0 || novaPagina > magias.length) return;

    const magiaContent = document.getElementById('magia-content');
    const paginaAtiva = magiaContent.querySelector('.magia-page');

    paginaAtiva.classList.remove('active');

    setTimeout(async () => {
        paginaAtual = novaPagina;
       magiaContent.innerHTML = paginaAtual === magias.length
  ? await criarPaginaMargemViva()
  : criarPaginaMagia(paginaAtual);
       const numeroTotal = magias.length + 1;
document.querySelector('.page-number').textContent = `P√°gina ${paginaAtual + 1} de ${numeroTotal}`;

        renderizarAcoesGrimorio();
        atualizarBotoes();
    }, 300);
}



function atualizarBotoes() {
  document.getElementById('prev-btn').disabled = paginaAtual === 0;
  document.getElementById('next-btn').disabled = paginaAtual === magias.length;
}

function renderizarAcoesGrimorio() {
    const magiaAtual = magias[paginaAtual];
    const jaMemorizada = window.arcanumIudicium.isMagiaMemorizada(magiaAtual.id);
    const jaEstudada = window.arcanumIudicium.isMagiaEstudada(magiaAtual.id);
    const jaReflexao = window.arcanumIudicium.isMagiaReflexao(magiaAtual.id);
    const mostrarEstudarNovamente = jaEstudada && !jaReflexao && Math.random() < 0.33;
    const actionsDiv = document.querySelector('.grimorio-actions');
    if (!actionsDiv) return;

    actionsDiv.innerHTML = '';
    if (mostrarEstudarNovamente)
        actionsDiv.innerHTML += '<button class="action-btn" onclick="estudarProfundamente()">Estudar</button>';
    else if (!jaEstudada)
        actionsDiv.innerHTML += '<button class="action-btn" onclick="estudarMagia()">Estudar</button>';

    if (!jaMemorizada) {
        const novoBotao = document.createElement('button');
        novoBotao.className = 'action-btn';
        novoBotao.onclick = memorizarMagia;
        novoBotao.textContent = 'Memorizar';
        actionsDiv.appendChild(novoBotao);
    }
}


async function estudarMagia() {
    const magiaAtual = magias[paginaAtual];
    
    // Salvar no Firestore
    await window.arcanumIudicium.estudarMagia(magiaAtual.id);
    
    // Recarregar a p√°gina atual para mostrar a inten√ß√£o
    const magiaContent = document.getElementById('magia-content');
    magiaContent.innerHTML = criarPaginaMagia(paginaAtual);
    
    // Usar fun√ß√£o centralizada
    renderizarAcoesGrimorio();
    
    // Aplicar efeito visual na inten√ß√£o
    setTimeout(() => {
        const intencaoDiv = document.querySelector('.magia-intencao');
        if (intencaoDiv) {
            intencaoDiv.style.color = '#8B4513';
            setTimeout(() => {
                intencaoDiv.style.color = '#c5bebe';
            }, 3000);
        }
    }, 100);
}

function estudarProfundamente() {
    const magiaAtual = magias[paginaAtual];
    const julgamentos = julgamentosMagias[magiaAtual.id];
    const perguntas = perguntasMagias[magiaAtual.id];
    
    const julgamentoAleatorio = julgamentos[Math.floor(Math.random() * julgamentos.length)];
    const perguntaAleatoria = perguntas[Math.floor(Math.random() * perguntas.length)];
    
    // Criar elementos
    const reflexaoDiv = document.createElement('div');
    reflexaoDiv.className = 'magia-reflexao';
    reflexaoDiv.innerHTML = `
        <div style="margin: 15px 0; font-size: 13px; color: #8B4513; font-weight: bold; font-style: italic;">
            ${julgamentoAleatorio}
        </div>
        <div style="margin: 15px 0; font-size: 13px; color: #c5bebe; font-weight: bold;">
            ${perguntaAleatoria}
        </div>
        <div style="margin: 15px 0; display: flex; gap: 10px; justify-content: center;">
            <button class="action-btn" onclick="responderMentalmente()">Responder Mentalmente</button>
            <button class="action-btn" onclick="fecharOlhos()">Fechar os Olhos</button>
        </div>
    `;
    
    // Inserir ap√≥s a inten√ß√£o
    const intencao = document.querySelector('.magia-intencao');
    intencao.parentNode.insertBefore(reflexaoDiv, intencao.nextSibling);
    
    // Remover bot√£o estudar
    const botaoEstudar = document.querySelector('button[onclick="estudarProfundamente()"]');
    if (botaoEstudar) {
        botaoEstudar.remove();
    }
}

async function responderMentalmente() {
    const magiaAtual = magias[paginaAtual];
    const julgamento = document.querySelector('.magia-reflexao div:first-child').textContent;
    
    // Salvar julgamento
    window.arcanumIudicium.reflexoesSalvas[magiaAtual.id] = julgamento;
    await window.arcanumIudicium.reflexaoMagia(magiaAtual.id);
    
    // Recarregar p√°gina para mostrar julgamento permanente
    const magiaContent = document.getElementById('magia-content');
    magiaContent.innerHTML = criarPaginaMagia(paginaAtual);
    
    // Usar fun√ß√£o centralizada
    renderizarAcoesGrimorio();
}


async function fecharOlhos() {
    const magiaAtual = magias[paginaAtual];
    const julgamento = document.querySelector('.magia-reflexao div:first-child').textContent;
    
    // Salvar julgamento
    window.arcanumIudicium.reflexoesSalvas[magiaAtual.id] = julgamento;
    await window.arcanumIudicium.reflexaoMagia(magiaAtual.id);
    
    // Criar overlay escuro
    const overlay = document.createElement('div');
    overlay.style.cssText = `
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: black;
        z-index: 10000;
        opacity: 0;
        transition: opacity 0.3s ease;
    `;
    
    document.body.appendChild(overlay);
    
    // Fade in para preto
    setTimeout(() => {
        overlay.style.opacity = '1';
    }, 10);
    
    // Ap√≥s 1 segundo, fade out e remover
    setTimeout(() => {
        overlay.style.opacity = '0';
        setTimeout(() => {
            document.body.removeChild(overlay);
            
            // Recarregar p√°gina para mostrar julgamento permanente
            const magiaContent = document.getElementById('magia-content');
            magiaContent.innerHTML = criarPaginaMagia(paginaAtual);
            
            // Usar fun√ß√£o centralizada
            renderizarAcoesGrimorio();
        }, 300);
    }, 1000);
}



async function memorizarMagia() {
    const magiaAtual = magias[paginaAtual];
    
    if (!window.arcanumIudicium.isMagiaMemorizada(magiaAtual.id)) {
        await window.arcanumIudicium.memorizarMagia(magiaAtual.id);
        
        // Remove apenas o bot√£o memorizar
        const botaoMemorizar = document.querySelector('button[onclick="memorizarMagia()"]');
        if (botaoMemorizar) {
            botaoMemorizar.remove();
        }
        
        // Atualiza o status na p√°gina
        const titulo = document.querySelector('.magia-titulo');
        if (titulo && !titulo.innerHTML.includes('‚úì Memorizada')) {
            titulo.innerHTML += ' <span style="color: #ffd700;">‚úì Memorizada</span>';
        }
        
        alert(`${magiaAtual.nome} foi memorizada!`);
    }
}



document.querySelectorAll('.menu-btn').forEach(button => {
    button.addEventListener('click', async function () {
        const content = this.getAttribute('data-content');
        
        if (content === 'grimorio') {
            const resultado = await contentData[content]();
            document.getElementById('content-area').innerHTML = resultado;
            setTimeout(() => {
                atualizarBotoes();
                renderizarAcoesGrimorio();
            }, 0);
        } else if (content === 'cruzar') {
    const resultado = await contentData[content]();
    document.getElementById('content-area').innerHTML = resultado;
} else {
            const resultado = typeof contentData[content] === 'function' ? contentData[content]() : contentData[content];
            document.getElementById('content-area').innerHTML = resultado;
        }
    });
});


async function criarCruzarAnimais() {
    const listaAnimaisHtml = await obterListaAnimais();
    const dynamicConditions = await getArcanumConditions(); // ADICIONAR AWAIT AQUI
    
    const conditionsHtml = Object.entries(dynamicConditions).map(([key, value]) => {
        if (!value) return '';
        const icon = getConditionIcon(key, value);
        return `<span class="condition">${icon}<br>${value.replace('-', ' ').toUpperCase()}</span>`;
    }).join('');
    
    setTimeout(() => {
        document.getElementById('slot-1').addEventListener('click', () => removerAnimal('slot-1'));
        document.getElementById('slot-2').addEventListener('click', () => removerAnimal('slot-2'));
    }, 100);
    
    return `
        <div class="cruzar-container">
            <div class="conditions-display" style="margin-bottom: 20px; text-align: center; font-size: 12px; color: #feca57;">
                ${conditionsHtml}
            </div>
            <div id="mensagem-erro" style="color: red; text-align: center; margin-bottom: 10px; display: none;">Animais assim n√£o geram descend√™ncia.</div>
            <div class="espaco-central" id="espaco-central">
                <div class="animal-slot" id="slot-1">Vazio</div>
                <div class="animal-slot" id="slot-2">Vazio</div>
            </div>
            <button class="cantar-btn" id="cantar-btn" onclick="cantarAnimais()">CANTAR</button>
            <div class="lista-animais" id="lista-animais">
                ${listaAnimaisHtml}
            </div>
        </div>
    `;
}

async function obterListaAnimais() {
    const userId = auth.currentUser?.uid;
    if (!userId) {
        return '<div class="sem-animais">Usu√°rio n√£o autenticado.</div>';
    }
    
    try {
        const playerRef = doc(db, "players", userId);
        const playerSnap = await getDoc(playerRef);
        
        if (!playerSnap.exists() || !playerSnap.data().inventory?.itemsInChest) {
            return '<div class="sem-animais">N√£o pode ofertar descend√™ncia sem ter exemplares para cruzar.</div>';
        }
        
        const itemsInChest = playerSnap.data().inventory.itemsInChest;
        
        // Filtra apenas animais vivos (t√™m energia e energia.total > 0)
        const animais = itemsInChest.filter(item => 
            item.energia && 
            item.energia.total > 0
        );
        
        if (animais.length === 0) {
            return '<div class="sem-animais">N√£o pode ofertar descend√™ncia sem ter exemplares para cruzar.</div>';
        }
        
        // Testa ambas as propriedades para ver qual existe
        return animais.map(animal => {
            const nomeAnimal = animal.content || animal.nome || 'Animal sem nome';
            const vidaAnimal = animal.energia.total;
            return `<div class="animal-item" onclick="selecionarAnimal('${nomeAnimal}', ${vidaAnimal})">${nomeAnimal} - ${vidaAnimal} HP</div>`;
        }).join('');
        
    } catch (error) {
        console.error("Erro ao carregar animais:", error);
        return '<div class="sem-animais">Erro ao carregar animais.</div>';
    }
}


function selecionarAnimal(nome, vida) {
    const slot1 = document.getElementById('slot-1');
    const slot2 = document.getElementById('slot-2');
    
    if (slot1.textContent === 'Vazio') {
        slot1.textContent = `${nome} - ${vida} HP`;
        slot1.dataset.nome = nome;
    } else if (slot2.textContent === 'Vazio') {
        slot2.textContent = `${nome} - ${vida} HP`;
        slot2.dataset.nome = nome;
    }
}



function removerAnimal(slotId) {
    const slot = document.getElementById(slotId);
    slot.textContent = 'Vazio';
    delete slot.dataset.nome;
    
    // Esconder mensagem de erro quando remover animal
    const mensagem = document.getElementById('mensagem-erro');
    if (mensagem) {
        mensagem.style.display = 'none';
    }
}

function calcularChanceCruzamento(condicoes) {
    let chanceBase = 50;
    let modificadores = [];
    let especiais = [];
    
    // Lua (fator principal)
    const fatorLua = {
        'nova': 0.6,      // 30% chance
        'crescente': 1.0,  // 50% chance  
        'cheia': 1.7,     // 85% chance
        'minguante': 0.8   // 40% chance
    };
    chanceBase *= fatorLua[condicoes.lua] || 1.0;
    if (condicoes.lua === 'cheia') especiais.push('muta√ß√£o rara');
    
    // Temperatura
    const fatorTemp = {
        'muito-frio': 0.5,  // 25%
        'frio': 1.2,        // 60%
        'ameno': 1.6,       // 80%
        'quente': 1.4,      // 70%
        'muito-quente': 0.7 // 35%
    };
    chanceBase *= fatorTemp[condicoes.temperatura] || 1.0;
    if (condicoes.temperatura === 'ameno') especiais.push('condi√ß√µes ideais');
    
    // Clima
    const fatorClima = {
        'sol-forte': 1.5,    // 75% + filhotes fortes
        'chuva-leve': 1.7,   // 85%
        'tempestade': 0.4,   // 20%
        'neblina': 1.3,      // 65% + albinismo
        'nublado': 1.4       // 70%
    };
    chanceBase *= fatorClima[condicoes.clima] || 1.0;
    if (condicoes.clima === 'sol-forte') especiais.push('filhote forte');
    if (condicoes.clima === 'neblina') especiais.push('chance albinismo');
    
    // Esta√ß√£o (fator importante)
    const fatorEstacao = {
        'primavera': 1.8,  // 90%
        'verao': 1.4,      // 70%
        'outono': 1.2,     // 60%
        'inverno': 0.6     // 30%
    };
    chanceBase *= fatorEstacao[condicoes.estacao] || 1.0;
    
    // Energia M√°gica
    const fatorEnergia = {
        'alta': 1.4,          // 70% + habilidade especial
        'normal': 1.5,        // 75%
        'baixa': 1.1,         // 55%
        'interferencia': 0.8  // 40% + muta√ß√£o bizarra
    };
    chanceBase *= fatorEnergia[condicoes.energiaMagica] || 1.0;
    if (condicoes.energiaMagica === 'alta') especiais.push('habilidade especial');
    if (condicoes.energiaMagica === 'interferencia') especiais.push('muta√ß√£o bizarra');
    
    // Per√≠odo do Dia
    const fatorPeriodo = {
        'madrugada': 1.6,  // 80%
        'manha': 1.5,      // 75%
        'tarde': 1.3,      // 65%
        'noite': 1.7       // 85%
    };
    chanceBase *= fatorPeriodo[condicoes.periodo] || 1.0;
    
    // Combina√ß√µes especiais
    if (condicoes.lua === 'cheia' && condicoes.estacao === 'primavera' && condicoes.periodo === 'madrugada') {
        especiais.push('Ninhada Lunar');
        chanceBase *= 1.2;
    }
    
    if (condicoes.clima === 'tempestade' && condicoes.energiaMagica === 'alta') {
        especiais.push('Filhote Tempestuoso');
        chanceBase *= 1.1;
    }
    
    // Combina√ß√µes mortais
    if ((condicoes.temperatura === 'muito-frio' && condicoes.clima === 'tempestade') ||
        (condicoes.temperatura === 'muito-quente' && condicoes.pressao === 'baixa')) {
        chanceBase = 0;
        especiais = ['Imposs√≠vel'];
    }
    
    const chanceTotal = Math.min(100, Math.max(0, chanceBase));
    
    return {
        chance: Math.round(chanceTotal),
        especiais: especiais,
        condicoes: condicoes
    };
}



async function cantarAnimais() {
    const slot1 = document.getElementById('slot-1');
    const slot2 = document.getElementById('slot-2');
    const mensagem = document.getElementById('mensagem-erro');
    
    if (slot1.textContent !== 'Vazio' && slot2.textContent !== 'Vazio') {
        const primeiroNome1 = slot1.dataset.nome.split(' ')[0];
        const primeiroNome2 = slot2.dataset.nome.split(' ')[0];
        
        if (primeiroNome1 === primeiroNome2) {
            // ‚¨áÔ∏è Aqui est√° o ajuste importante
            const condicoes = await getArcanumConditions();
            const resultado = calcularChanceCruzamento(condicoes);
            
            console.log(`Chance de cruzamento: ${resultado.chance}%`, resultado);
            
            iniciarCruzamento(slot1.dataset.nome, slot2.dataset.nome, resultado);
        } else {
            mensagem.textContent = 'Animais assim n√£o geram descend√™ncia.';
            mensagem.style.display = 'block';
        }
    } else {
        mensagem.textContent = 'Selecione dois animais para cruzar.';
        mensagem.style.display = 'block';
    }
}



function iniciarCruzamento(animal1, animal2, resultado) {
    const mensagem = document.getElementById('mensagem-erro');
    const numerosRomanos = ['X', 'IX', 'VIII', 'VII', 'VI', 'V', 'IV', 'III', 'II', 'I'];
    let contador = 0;
    
    // Desabilitar bot√µes
    desabilitarBotoesCruzar(true);
    
    // Mostrar chance e condi√ß√µes
    const especialTexto = resultado.especiais.length > 0 ? ` (${resultado.especiais.join(', ')})` : '';
    
    mensagem.innerHTML = `
        <div class="contagem-container">
            <span>Cruzando ${animal1} com ${animal2}!</span>
            <span style="color: #feca57;">Chance: ${resultado.chance}%${especialTexto}</span>
            <span id="contador-romano">${numerosRomanos[contador]}</span>
            <span class="ampulheta">‚ßó</span>
        </div>
    `;
    mensagem.style.display = 'block';
    
    // Salvar resultado para usar depois
    window.resultadoCruzamento = resultado;
    
    // Iniciar contagem
    const intervalo = setInterval(() => {
        contador++;
        if (contador < numerosRomanos.length) {
            document.getElementById('contador-romano').textContent = numerosRomanos[contador];
        } else {
            clearInterval(intervalo);
            finalizarCruzamento();
        }
    }, 1000);
}


function finalizarCruzamento() {
    const mensagem = document.getElementById('mensagem-erro');
    const resultado = window.resultadoCruzamento;
    
    // Rolar para ver se teve sucesso
    const rolagem = Math.random() * 100;
    const sucesso = rolagem <= resultado.chance;
    
    if (sucesso) {
        const especialTexto = resultado.especiais.length > 0 ? ` ${resultado.especiais.join(' + ')}!` : '!';
        
        mensagem.innerHTML = `
            <div class="contagem-container">
                <span style="color: #00ff00;">Descend√™ncia gerada${especialTexto}</span>
                <button class="botao-recolher" onclick="recolherDescendencia()">Recolher</button>
            </div>
        `;
    } else {
        mensagem.innerHTML = `
            <div class="contagem-container">
                <span style="color: #ff6b6b;">Cruzamento falhou (${Math.round(rolagem)}% vs ${resultado.chance}%)</span>
                <button class="botao-recolher" onclick="limparCruzamento()">Tentar Novamente</button>
            </div>
        `;
    }
    
    // Reabilitar bot√µes
    desabilitarBotoesCruzar(false);
}

function limparCruzamento() {
    const mensagem = document.getElementById('mensagem-erro');
    mensagem.style.display = 'none';
    removerAnimal('slot-1');
    removerAnimal('slot-2');
}


function desabilitarBotoesCruzar(desabilitar) {
    const botaoCantar = document.getElementById('cantar-btn');
    const slots = document.querySelectorAll('.animal-slot');
    const animaisLista = document.querySelectorAll('.animal-item');
    
    if (botaoCantar) {
        botaoCantar.disabled = desabilitar;
        botaoCantar.style.opacity = desabilitar ? '0.5' : '1';
        botaoCantar.style.cursor = desabilitar ? 'not-allowed' : 'pointer';
    }
    
    slots.forEach(slot => {
        slot.style.pointerEvents = desabilitar ? 'none' : 'auto';
        slot.style.opacity = desabilitar ? '0.5' : '1';
    });
    
    animaisLista.forEach(item => {
        item.style.pointerEvents = desabilitar ? 'none' : 'auto';
        item.style.opacity = desabilitar ? '0.5' : '1';
    });
}

function criarGriloVariant(condicoes, especiais) {
    console.log("ü¶ó AN√ÅLISE DE GRILO:");
    console.log("   Condi√ß√µes:", condicoes);
    console.log("   Especiais:", especiais);
    
    // Verificar condi√ß√µes especiais em ordem de prioridade
    
    // Combina√ß√£o especial: Lua Cheia + Primavera + Madrugada
    if (especiais.includes('Ninhada Lunar')) {
        console.log("   ‚úÖ GRILO LUNAR - Ninhada Lunar detectada");
        return {
            id: "grilo-lunar",
            content: "Grilo Lunar",
            description: "Um grilo m√≠stico que brilha suavemente no escuro com luz prateada",
            energia: { total: 1, inicial: 1 }
        };
    }
    
    // Neblina = Grilo Albino
    if (condicoes.clima === 'neblina') {
        console.log("   ‚úÖ GRILO ALBINO - Clima neblina");
        return {
            id: "grilo-albino",
            content: "Grilo Albino",
            description: "Um raro grilo de cor branca pura, quase transl√∫cido",
            energia: { total: 1, inicial: 1 }
        };
    }
    
    // Energia Alta = Grilo El√©trico
    if (condicoes.energiaMagica === 'alta') {
        console.log("   ‚úÖ GRILO EL√âTRICO - Energia m√°gica alta");
        return {
            id: "grilo-eletrico",
            content: "Grilo El√©trico",
            description: "Um grilo que crepita com pequenas fa√≠scas el√©tricas",
            energia: { total: 1, inicial: 1 }
        };
    }
    
    // Sol Forte = Grilo Dourado
    if (condicoes.clima === 'sol-forte') {
        console.log("   ‚úÖ GRILO DOURADO - Sol forte");
        return {
            id: "grilo-dourado",
            content: "Grilo Dourado",
            description: "Um grilo com exoesqueleto dourado e resist√™ncia superior",
            energia: { total: 2, inicial: 2 }
        };
    }
    
    // Interfer√™ncia M√°gica = Grilo Mutante
    if (condicoes.energiaMagica === 'interferencia') {
        console.log("   ‚úÖ GRILO MUTANTE - Interfer√™ncia m√°gica");
        return {
            id: "grilo-mutante",
            content: "Grilo Mutante",
            description: "Um grilo com caracter√≠sticas bizarras e habilidades imprevis√≠veis",
            energia: { total: 1, inicial: 1 }
        };
    }
    
    // Grilo b√°sico (padr√£o)
    console.log("   ‚ö™ GRILO NORMAL - Nenhuma condi√ß√£o especial atendida");
    return {
        id: "grilo",
        content: "Grilo",
        description: "Um pequeno grilo saltitante",
        energia: { total: 1, inicial: 1 }
    };
}



async function recolherDescendencia() {
    const userId = auth.currentUser?.uid;
    if (!userId) {
        console.error('Usu√°rio n√£o autenticado');
        return;
    }
    
    try {
        const playerRef = doc(db, "players", userId);
        const playerSnap = await getDoc(playerRef);
        
        if (!playerSnap.exists()) {
            console.error('Dados do jogador n√£o encontrados');
            return;
        }
        
        const playerData = playerSnap.data();
        const inventory = playerData.inventory || {};
        const itemsInChest = inventory.itemsInChest || [];
        
        // Determinar tipo de grilo baseado nas condi√ß√µes
        const resultado = window.resultadoCruzamento;
        const condicoes = resultado.condicoes;
        let griloGerado = criarGriloVariant(condicoes, resultado.especiais);
        
        // Adiciona ao invent√°rio
        itemsInChest.push(griloGerado);

// Salvar proeza se for grilo raro
let proezaMsg = null;
if (griloGerado.id === "grilo-albino") {
  proezaMsg = "ele trouxe m√∫sica em miniatura. Um grilo. Raro. Vivo. Por quanto tempo? Ele obteve um Grilo Albino";
}
if (griloGerado.id === "grilo-mutante") {
  proezaMsg = "Um presente? Um press√°gio? Anoto, mas n√£o aprovo. Ele obteve um Grilo Mutante (Muta√ß√£o Rara)";
}
if (griloGerado.id === "grilo-eletrico") {
  proezaMsg = "Anoto aqui com relut√¢ncia: o tolo apanhou um grilo raro.";
}
if (proezaMsg) {
  const dataAgora = new Date();
  const dataFormatada = dataAgora.toLocaleDateString('pt-BR') + ' ' + dataAgora.toLocaleTimeString('pt-BR');
  const mensagemProeza = `${proezaMsg} em ${dataFormatada}`;

  // Sempre busque o array mais recente do Firestore
  const playerSnapAtual = await getDoc(playerRef);
  const proezasAtuais = playerSnapAtual.exists() && playerSnapAtual.data().proezas ? playerSnapAtual.data().proezas : [];
  proezasAtuais.push(mensagemProeza);

  await setDoc(playerRef, { proezas: proezasAtuais }, { merge: true });
}
        
        // Remove a mensagem e limpa os slots
        const mensagem = document.getElementById('mensagem-erro');
        if (mensagem) {
            mensagem.style.display = 'none';
        }
        
        removerAnimal('slot-1');
        removerAnimal('slot-2');
        
        alert(`${griloGerado.content} adicionado ao invent√°rio!`);
        
    } catch (error) {
        console.error('Erro ao adicionar grilo:', error);
        alert('Erro ao recolher descend√™ncia');
    }
}



// Torna fun√ß√µes acess√≠veis globalmente para onclick
window.mudarPagina = mudarPagina;
window.estudarMagia = estudarMagia;
window.memorizarMagia = memorizarMagia;
window.estudarProfundamente = estudarProfundamente;
window.responderMentalmente = responderMentalmente;
window.fecharOlhos = fecharOlhos;
window.selecionarAnimal = selecionarAnimal;
window.cantarAnimais = cantarAnimais;
window.recolherDescendencia = recolherDescendencia;
window.dormirTelaPreta = dormirTelaPreta;

const come√ßos = [

"H√° um lugar onde",
"Em um campo aberto,",
"Ao lado de um rio,",
"Numa rua que voc√™ acha que conhece,",
"Dentro de uma casa sem teto,",
"Voc√™ v√™ pessoas esperando em sil√™ncio",
"Voc√™ entra em um lugar familiar",
"Na margem de algo imenso,",
"Algu√©m segura sua m√£o e",
"Voc√™ volta a um lugar que nunca viu",
"Na beira da floresta,",
"Enquanto o sol se p√µe devagar,",
"Debaixo de uma ponte,",
"Em um corredor estreito,",
"Voc√™ ouve passos e",
"Dentro de uma esta√ß√£o vazia,",
"H√° um animal parado",
"Num quintal sem port√£o,"
// ‚Äî Novos come√ßos ‚Äî
  "No topo de um morro isolado,",
  "Em um sal√£o iluminado por velas,",
  "Na praia onde as ondas n√£o quebram,",
  "Em um vilarejo sem moradores,",
  "Em um trem que nunca chega,",
  "No sil√™ncio de uma biblioteca vazia,",
  "Num celeiro esquecido,",
  "No fundo de um cais antigo,",
  "Em uma caverna escura,",
  "Na crista de uma montanha gelada,",
  "Nos escombros de uma cidade perdida,",
  "Num labirinto de corredores brancos,",
  "Em meio a est√°tuas sem rosto,",
  "Num teatro sem plateia,",
  "Na cozinha de uma casa intocada,",
  "Embaixo de uma √°rvore que n√£o floresce,",
  "Na borda de um penhasco,",
  "Sobre um rio congelado,",
  "Num deserto coberto de neblina,",
  "Num navio fantasma ancorado,",
  "Num campo de girass√≥is murchos,",
  "Dentro de um castelo em ru√≠nas,",
  "Num asilo silencioso,",
  "Num altar sem oferenda,",
  "Em um beco sem sa√≠da,",
  "Num jardim sem flores,",
  "No sal√£o de espelhos quebrados,",
  "Em meio a nuvens de poeira,",
  "Na sombra de um farol apagado,",
  "Na cratera de um vulc√£o adormecido,",
  "Em um p√°tio cercado por muros altos,",
  "No t√∫nel de um metr√¥ desativado,",
  "Na cobertura de um pr√©dio abandonado,",
  "Na sala de aula trancada,",
  "Num hospital inundado,",
  "Na varanda de um casar√£o antigo,",
  "Em um circo sem palha√ßos,",
  "Em uma esta√ß√£o de r√°dio silenciosa,",
  "No centro de um labirinto de espinhos,",
  "Em um por√£o guardado pelo sil√™ncio,",
  "Num port√£o rangendo ao vento,",
  "No cais onde navios j√° naufragaram,",
  "Na colina onde as √°rvores n√£o crescem,",
  "Embaixo de um toldo rasgado,",
  "No meio de uma sala vazia,",
  "Perto de um rel√≥gio parado,",
  "Sobre trilhos que n√£o conduzem a lugar algum,",
  "Num terra√ßo coberto de hera,",
  "Perto de uma ponte quebrada,",
  "Em um campo onde as sombras dan√ßam,",
  "Num corredor iluminado por l√¢mpadas tremeluzentes,",
    
//RAROS E PERTURBADORES
    "No fundo de uma escola vazia,",
  "Dentro de um castelo em ru√≠nas,",
  "Em uma esta√ß√£o de trem onde n√£o h√° trilhos,",
  "Num campo sem horizonte,",
  "Atr√°s do espelho do seu antigo quarto,",
  "Sob uma √°rvore que cresce ao contr√°rio,",
  "Num quarto id√™ntico ao seu, mas com m√≥veis trocados,",
  "Num por√£o onde todas as luzes est√£o acesas,",
  "Dentro de um elevador que n√£o para de subir,",
  "Num corredor de hospital sem fim,",
  "Numa cidade onde todas as casas s√£o iguais,",
  "Na sala onde voc√™ cresceu, mas tudo est√° molhado,",
  "Num banheiro com dezenas de espelhos,",
  "No sil√™ncio entre dois trov√µes,",
  "Num √¥nibus que s√≥ anda em marcha r√©,",
  "Na rua onde voc√™ morou, mas tudo est√° coberto de cinzas,"
 
];

const imagens = [
"um cachorro observa o rio como se esperasse algo.",
"h√° crian√ßas brincando com bonecas que parecem feitas de vidro.",
"uma mulher acende velas para um p√°ssaro morto.",
"os peixes nadam no ar acima do lago.",
"uma fila de pessoas espera diante de uma porta trancada.",
"voc√™ encontra uma carta escrita por algu√©m que ainda n√£o nasceu.",
"uma bicicleta enferrujada se move sozinha pela estrada.",
"os talheres flutuam em volta da mesa, mas ningu√©m repara.",
"uma crian√ßa diz que o mundo acabou ontem.",
"voc√™ encontra um arm√°rio cheio de seus pr√≥prios sapatos.",
"h√° um mercado onde ningu√©m vende nada, mas todos est√£o comprando.",
"uma fogueira arde dentro de uma pia.",
"algu√©m sorri com seu rosto.",
"h√° um animal deitado no sof√°, como se fosse da fam√≠lia.",
"o mar recua at√© sumir completamente.",
"as nuvens formam letras que voc√™ tenta ler.",
"algu√©m tenta te acordar, mas voc√™ n√£o consegue lembrar quem √©.",

  "um velho toca piano no fundo de uma piscina vazia.",
  "h√° livros enterrados no jardim, com as p√°ginas ainda secas.",
  "um poste de luz pisca em c√≥digo Morse, mas ningu√©m responde.",
  "voc√™ v√™ seu pr√≥prio quarto dentro de uma televis√£o antiga.",
  "um menino segura uma caixa e diz que ela cont√©m o vento.",
  "h√° um hospital abandonado onde os rel√≥gios andam para tr√°s.",
  "um trem atravessa um campo de trigo √†s tr√™s da manh√£, sem trilhos.",
  "voc√™ observa a si mesmo dormindo, mas de outro quarto.",
  "uma mulher coloca cartas em envelopes e os joga no rio.",
  "h√° um po√ßo onde as moedas sussurram quando caem.",
  "um homem chora diante de um espelho coberto por len√ßol.",
  "h√° uma casa sem portas, apenas janelas abertas.",
  "um c√£o uiva para um bal√£o preso em uma √°rvore.",
  "voc√™ v√™ um funeral onde ningu√©m parece saber quem morreu.",
  "uma ponte liga dois telhados de pr√©dios diferentes.",
  "uma crian√ßa desenha voc√™ com uma exatid√£o imposs√≠vel.",
  "h√° um campo onde todos os espantalhos olham para voc√™.",
  "algu√©m varre folhas no fundo do mar.",
  "um avi√£o estacionado em um estacionamento de supermercado.",
  "as roupas no varal se movem como se estivessem dan√ßando.",
  "um urso toma ch√° com duas senhoras em uma varanda.",
  "as placas de tr√¢nsito brilham mesmo sem luz.",
  "voc√™ v√™ uma porta no meio de um campo vazio.",
  "um homem alimenta pombos com migalhas de um livro rasgado.",
  "um √¥nibus escolar vazio atravessa um t√∫nel debaixo d‚Äô√°gua.",
  "h√° um palco montado no topo de uma √°rvore.",
  "as paredes da casa respiram devagar.",
  "um carro estacionado est√° coberto por folhas, mas √© ver√£o.",
  "algu√©m coloca sal em volta de uma bicicleta.",
  "voc√™ v√™ sapatos arrumados como se esperassem uma reuni√£o.",
  "um barco √† vela preso no meio de uma estrada.",
  "h√° uma sombra andando sem ningu√©m.",
  "algu√©m planta rel√≥gios em pequenos vasos.",
  "uma crian√ßa diz que o sol est√° dormindo hoje.",
  "as est√°tuas de um museu se viram para te olhar.",
  "voc√™ recebe uma carta assinada por um nome que te assusta.",
  "h√° pessoas sentadas em um restaurante, mas s√≥ bebem √°gua.",
  "um balde coleta l√°grimas em uma sala vazia.",
  "voc√™ pisa em ovos e nenhum quebra.",
  "um peixe salta de uma tigela para uma lareira acesa.",
  "um homem oferece um guarda-chuva mesmo sem chuva.",
  "voc√™ encontra sua cama no meio de uma floresta.",
  "uma porta gira sozinha, devagar, como se cansada.",
  "h√° um quarto onde o teto toca o ch√£o.",
  "os quadros pendurados na parede est√£o de costas.",
  "uma mulher fala com uma planta, e ela responde.",
  "uma crian√ßa abre a geladeira e encontra neve.",
  "h√° um campo de girass√≥is com olhos no centro.",
  "uma m√£o desenhada na parede tenta segurar a sua.",
  "as √°rvores andam alguns metros quando ningu√©m v√™.",
  "voc√™ v√™ sua inf√¢ncia sentada em um banco de pra√ßa.",
  "um r√°dio toca sussurros ao inv√©s de m√∫sica.",
  "as janelas mostram lugares diferentes do que h√° l√° fora.",
  "uma senhora vende mem√≥rias em potes de vidro.",
  "voc√™ pisa em uma cal√ßada que canta baixinho.",
  "um gato dorme dentro de um rel√≥gio antigo.",
  "h√° uma escada que sobe at√© o fundo de um lago.",
  "algu√©m pinta o c√©u de cinza com um rolo.",
  "um vendedor oferece ma√ß√£s que brilham no escuro.",
  "h√° uma escola com apenas uma cadeira e dois quadros.",
  "uma loja vende retratos de pessoas que nunca existiram.",
  "um homem sopra bolhas que n√£o estouram nunca.",
  "voc√™ entra em um elevador que sobe, mas o mundo desce.",
  "h√° uma esta√ß√£o de trem onde todos os trilhos levam ao mesmo lugar.",
  "um arm√°rio aberto mostra uma praia iluminada.",
  "voc√™ v√™ palavras escritas no ch√£o com p√©talas.",
  "um cachorro late sem abrir a boca.",
  "h√° um rio que corre de volta para a nascente.",
  "algu√©m l√™ um jornal do dia seguinte.",
  "as pessoas piscam ao mesmo tempo e desaparecem por um segundo.",
  "uma crian√ßa segura uma vela acesa dentro da chuva.",
  "h√° uma ma√ßaneta no ch√£o de pedra.",
  "um homem desenha rostos na neblina.",
  "voc√™ v√™ estrelas caindo para cima.",
  "um sino toca toda vez que voc√™ pisca.",
  "h√° uma caixa de m√∫sica que toca risos.",
  "as laranjas no cesto t√™m olhos fechados.",
  "um peixe canta em cima da geladeira.",
  "uma mulher atravessa a rua de olhos fechados com seguran√ßa.",
  "voc√™ encontra um copo com seu nome j√° escrito.",
  "h√° um quadro-negro com frases escritas por sua av√≥.",
  "as sombras sobem pelas paredes ao amanhecer.",
  "um beb√™ segura uma bengala e diz que √© seu av√¥.",
  "h√° uma carta no seu bolso escrita por algu√©m que voc√™ amava.",
  "um gato te segue por um sonho inteiro sem nunca piscar.",
  "uma estante de livros gira sozinha e revela uma sala.",
  "voc√™ toca em um espelho e ele afunda como √°gua.",
  "h√° um metr√¥nomo batendo dentro de uma flor.",
  "um vendedor vende mapas que mostram apenas onde voc√™ chorou.",
  "voc√™ se v√™ rindo, mas n√£o sabe o motivo.",
  "as pessoas andam de costas nas ruas.",
  "um sem√°foro muda de cor para roxo e todos param.",
  "h√° um quadro de voc√™ mesmo, mas mais velho e assustado.",
  "um gato entra por uma janela e sai por outra d√©cada.",
  "voc√™ segura a m√£o de algu√©m e sente saudade.",
  "h√° um rio com nomes escritos na espuma.",
  "as pedras do ch√£o tentam formar palavras.",
  "uma pessoa tira fotos com uma c√¢mera sem lente.",
  "voc√™ v√™ uma estrela dentro de um copo d‚Äô√°gua.",
  "h√° uma bandeira tremulando mesmo sem vento.",
  "um homem pede desculpas a uma √°rvore e abra√ßa o tronco.",
  "voc√™ encontra sua pr√≥pria assinatura em uma pedra antiga.",

  "um rel√≥gio marca um hor√°rio imposs√≠vel, como 25:61.",
  "um elevador teme cair e bloqueia o bot√£o de emerg√™ncia.",
  "uma l√¢mpada sussurra segredos antigos quando acesa.",
  "os m√≥veis trocam de forma sempre que voc√™ pisca.",
  "uma porta surge no ch√£o e se abre para dentro.",
  "um p√°ssaro com espelho no peito reflete seu olhar.",
  "um espantalho convida voc√™ para tomar ch√°.",
  "um tapete se desenrola e revela um rio sob seus p√©s.",
  "as paredes escorrem tinta que fala seu nome.",
  "um livro l√™ seu dono em voz alta.",
  "voc√™ v√™ seus pr√≥prios passos dan√ßando sem voc√™.",
  "o sol nasce no oeste e deixa um rastro de gelo.",
  "a grama cresce ao ritmo de uma can√ß√£o sem voz.",
  "um piano toca sozinho na beira de um penhasco.",
  "os rel√≥gios batem como cora√ß√µes pulsantes.",
  "uma crian√ßa sorri sem demonstrar alegria.",
  "um gato atravessa uma porta de espelhos infinitos.",
  "voc√™ sente o sopro de uma tempestade invis√≠vel.",
  "a chuva cai em c√¢mera lenta, como gotas de vidro.",
  "um telefone toca, mas n√£o h√° quem atenda.",
  "as sombras executam uma dan√ßa sincronizada.",
  "um rio de areia flui como se fosse √°gua corrente.",
  "um selo de vidro lacra sua testa sem dor.",
  "uma nuvem passeia pelo corredor sem tocar o teto.",
  "os azulejos do ch√£o cantam uma melodia triste.",
  "um sapato cal√ßa seu p√© sem nunca toc√°-lo.",
  "a lua se reflete em uma po√ßa de √≥leo negro.",
  "um coelho marca as horas com cada pulo.",
  "as tochas se apagam sozinhas, deixando rastros de luz.",
  "uma escultura sussurra contos de sonhos antigos.",
  "o vento escreve mensagens na areia do piso.",
  "um vibrato percorre os ossos do edif√≠cio.",
  "um camale√£o confunde o pr√≥prio reflexo.",
  "um sino √© tocado por m√£os invis√≠veis.",
  "as plantas se inclinam ao ritmo de seus passos.",
  "um quadro absorve a cor de tudo ao redor.",
  "uma po√ßa reflete um c√©u que n√£o existe.",
  "as lumin√°rias pulsam como lanternas de vaga-lume.",
  "um barulho de passos segue em padr√µes r√≠tmicos.",
  "os livros se abrem sozinhos em um cap√≠tulo perdido.",
  "a √°gua de um copo se transforma em fuma√ßa.",
  "um chal√© desmonta-se e revela segredos no s√≥t√£o.",
  "um par de sapatos dan√ßa sem par.",
  "uma vitrine mostra o seu pr√≥prio passado.",
  "os sinos de vento tocam melodias desconcertantes.",
  "um farol pisca no meio de uma sala escura.",
  "teias de aranha pendem coroas de luz.",
  "um urso de pel√∫cia pisca para voc√™.",
  "as portas se fecham depois de voc√™ entrar.",
  "uma vespa faz sombra de borboleta.",
  "um rel√≥gio de sol projeta sua sombra ao meio-dia.",
  "uma escultura de gelo n√£o derrete, mesmo no fogo.",
  "os espelhos escondem lembran√ßas antigas.",
  "um marinheiro chora l√°grimas de tinta.",
  "uma bota caminha at√© a porta e espera por voc√™.",

    //RAROS E PERTURBADORES
 "uma crian√ßa desenha voc√™ com uma exatid√£o imposs√≠vel.",
  "voc√™ v√™ um corpo vestido como voc√™, mas o rosto est√° ausente.",
  "todas as pessoas olham para voc√™, mas com os olhos virados ao contr√°rio.",
  "algu√©m diz seu nome do jeito exato que voc√™ odeia ouvir.",
  "um animal morto tenta entrar pela janela, com muito cuidado.",
  "voc√™ ouve seus pais chorando embaixo do ch√£o.",
  "um telefone toca sem parar, mas quando voc√™ atende, est√° ouvindo sua pr√≥pria voz pedindo socorro.",
  "h√° fotos suas envelhecidas, como se voc√™ tivesse morrido h√° d√©cadas.",
  "sua m√£o est√° segurando algo que n√£o consegue soltar, mas voc√™ n√£o enxerga o que √©.",
  "algu√©m sussurra um segredo que voc√™ sente que sempre soube, mas n√£o quer lembrar.",
  "um espelho mostra algu√©m que copia seus movimentos com atraso.",
  "voc√™ sente que algo foi arrancado de voc√™, mas n√£o sabe o qu√™.",
  "um grupo de pessoas canta sua hist√≥ria em uma l√≠ngua que voc√™ entende e esquece ao mesmo tempo.",
  "uma criatura usa seu rosto para pedir perd√£o.",
  "todos ao seu redor fingem que voc√™ n√£o est√° ali ‚Äï at√© voc√™ parar de se mover.",
  "voc√™ escreve uma carta para algu√©m que nunca vai existir.",
  "uma vers√£o sua menor est√° trancada num aqu√°rio, batendo nas paredes de vidro.",
  "um buraco se abre na sua barriga e come√ßa a contar os dias.",
  "h√° dentes crescendo nas costas da sua l√≠ngua.",
  "uma grava√ß√£o mostra voc√™ acordando todos os dias e esquecendo o mesmo crime."
    
];


function gerarSonho() {
  const c = come√ßos[Math.floor(Math.random() * come√ßos.length)];
  const i = imagens[Math.floor(Math.random() * imagens.length)];

  return `${c}‚Ä¶ ${i}`;
}



function dormirTelaPreta() {
  const overlay = document.createElement('div');
  overlay.style.cssText = `
    position: fixed;
    top: 0; left: 0; width: 100vw; height: 100vh;
    background: black;
    z-index: 99999;
    opacity: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: opacity 2s ease;
    flex-direction: column;
  `;

  const mensagem = document.createElement('div');
  mensagem.textContent = 'Voc√™ adormece...';
  mensagem.style.cssText = `
    color: #fff;
    font-size: 2rem;
    opacity: 0;
    transition: opacity 3s ease;
    font-family: 'VT323', monospace;
    text-align: center;
    max-width: 80vw;
    margin-bottom: 3rem;
  `;

  const fraseSonho = document.createElement('div');
  fraseSonho.textContent = ''; // vai receber depois
  fraseSonho.style.cssText = `
    color: #aaa;
    font-size: 1.5rem;
    opacity: 0;
    transition: opacity 2s ease;
    font-family: 'VT323', monospace;
    text-align: center;
    max-width: 80vw;
  `;

  overlay.appendChild(mensagem);
  overlay.appendChild(fraseSonho);
  document.body.appendChild(overlay);

  setTimeout(() => {
    overlay.style.opacity = '1';
  }, 10);

  setTimeout(() => {
    mensagem.style.opacity = '1';
  }, 2000);

  setTimeout(() => {
    fraseSonho.textContent = gerarSonho();
    fraseSonho.style.opacity = '1';
  }, 5000);

  // (Opcional: remove ap√≥s alguns segundos ou com tecla)
  setTimeout(() => {
    overlay.style.opacity = '0';
    setTimeout(() => document.body.removeChild(overlay), 2000);
  }, 12000);
}


function aplicarEfeitosAleatorios() {
    const eficiencia = parseFloat(window.arcanumIudicium.getEficiencia());
    
    if (eficiencia >= 80) {
        // 70% chance para it√°lico
        if (Math.random() < 0.7) {
            // S√≥ aplica em descri√ß√£o, n√£o em stats que t√™m HTML complexo
            const elementos = document.querySelectorAll('.magia-descricao');
            if (elementos.length > 0) {
                const elementoAleatorio = elementos[Math.floor(Math.random() * elementos.length)];
                
                const texto = elementoAleatorio.innerHTML;
                const palavras = texto.split(' ');
                const palavraAleatoria = Math.floor(Math.random() * palavras.length);
                
                // S√≥ aplica se a palavra n√£o cont√©m HTML
                if (!palavras[palavraAleatoria].includes('<') && !palavras[palavraAleatoria].includes('>')) {
                    palavras[palavraAleatoria] = `<em>${palavras[palavraAleatoria]}</em>`;
                    elementoAleatorio.innerHTML = palavras.join(' ');
                }
            }
        }
        
    } else if (eficiencia < 30) {
        // 40% chance para piscar
        if (Math.random() < 0.4) {
            const elementos = document.querySelectorAll('.magia-descricao, .magia-stats div');
            const elementoAleatorio = elementos[Math.floor(Math.random() * elementos.length)];
            elementoAleatorio.style.animation = 'piscar 0.3s ease-in-out 3';
        }
        // 30% chance para desaparecer
        else if (Math.random() < 0.3) {
            const elementos = document.querySelectorAll('.magia-descricao, .magia-stats div');
            const elementoAleatorio = elementos[Math.floor(Math.random() * elementos.length)];
            elementoAleatorio.style.animation = 'desaparecer 0.6s ease-in-out';
        }
        
    } else {
        // 60% chance para tremular (efici√™ncia baixa)
        if (Math.random() < 0.6) {
            const elementos = document.querySelectorAll('.magia-descricao, .magia-stats div');
            const elementoAleatorio = elementos[Math.floor(Math.random() * elementos.length)];
            elementoAleatorio.style.animation = 'tremular 0.5s ease-in-out 2';
        }
    }
}



